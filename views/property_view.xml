<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="action_property_view_offers" model="ir.actions.act_window">
            <field name="name">Property</field>
            <field name="res_model">estate.property.offer</field>
            <field name="view_mode">tree,form</field>
            <field name="domain">[('property_id', '=', active_id)]</field>
        </record>

        <record id="estate_property_tree_view" model="ir.ui.view">
            <field name="name">estate.property.tree</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <tree>
                    <field name="name"/>
                    <field name="type_id"/>
                    <field name="postcode"/>
                    <field name="date_availability"/>
                    <field name="expected_price"/>
                    <field name="best_offer"/>
                    <field name="selling_price"/>
                </tree>
            </field>
        </record>

        <!-- Search view allows searching a record by specific attributes -->
        <!-- Also allows for filtering and grouping -->
        <!-- There will be a default search for 'name' in any case, without adding it -->
        <record id="estate_property_search_view" model="ir.ui.view">
            <field name="name">estate.property.search</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <search>
                    <!-- The fields included here are the ones you'll be able to search against -->
                    <field name="name"/>
                    <field name="state"/>
                    <field name="buyer_id"/>
                    <field name="postcode"/>
                    <!-- the default filter provided by odoo can accept specific rules, but we can also add our own custom filter -->
                    <filter name="new_state" string="New" domain="[('state', '=', 'new')]" />
                    <filter name="sold_state" string="Sold" domain="[('state', '=', 'sold')]" />
                    <!-- Horizontal line -->
                    <separator/>
                    <filter name="received_state" string="Received Offer" domain="[('state', '=', 'received')]" />
                    <filter name="accepted_state" string="Accepted Offer" domain="[('state', '=', 'accepted')]" />

                    <!-- Just like with filter, the default groupby provided by odoo can accept specific rules, but we can also add our own custom groupby -->
                    <separator/>
                    <group expand="0" string="Group By" >
                        <filter name="group_by_state" string="State" context="{'group_by': 'state'}"/>
                    </group>

                    <!-- Seems to be just another way to represent the same thing as the group tag -->
                    <!-- The search panel lists all the available values in a field -->
                    <!-- So here we're listing all the available 'state' values -->
                    <searchpanel>
                        <field name="state" icon="fa-filter" groupby="group_by_state" limit="0"/>
                    </searchpanel>

                </search>

            </field>
        </record>

        <!-- The kanban view shows records as cards -->
        <record id="estate_property_kanban_view" model="ir.ui.view">
            <field name="name">estate.property.kanban</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">


                    <!-- I find it confusing, but I need to specify the name of the module when linking the form view -->
                    <!-- It won't work otherwise, and will use a default quick form instead of the custom one -->
                    <kanban
                    on_create="quick_create"
                    quick_create_view="real_estate_ads.quick_create_estate_property_form_view"
                    default_group_by="state"> <!-- You can change the state then by dragging cards in the kanban -->
                    <field name="name"/>
                    <field name="state"/>
                    <field name="postcode"/>
                    <field name="buyer_id"/>
                    <!-- QWeb tags will be looked at in more depth later in the course, but we'll see a simple use case here -->
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_details">
                                <strong class="o_kanban_record_title">
                                    <field name="name"/>
                                </strong>
                                <div class="o_kanban_tags_section">
                                    <field name="tag_ids" widget="many2many_tags" options="{'color_field': 'color'}"/>
                                </div>
                                <div class="o_kanban_record_bottom">
                                    <div class="oe_kanban_bottom_left">
                                        <field name="offer_count"/> Offer(s)
                                    </div>
                                </div>
                            </div>
                        </t>
                    </templates>
                </kanban>
            </field>
        </record>

        <record id="quick_create_estate_property_form_view" model="ir.ui.view">
            <field name="name">estate.property.form</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <form>
                    <field name="name"/>
                </form>
            </field>
        </record>

        <!-- The pivot view is described as being more like a report, to give you an idea of what's going on in the database -->
        <record id="estate_property_pivot_view" model="ir.ui.view">
            <field name="name">estate.property.pivot</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <pivot>
                    <!-- In a pivot table, fields fall into three categories; row, measure, column -->
                    <!-- Useful if you need to create a quick report/overview of your model, as you can export it to Excel -->
                    <field name="name" type="row"/>
                    <field name="selling_price" type="measure"/>
                    <field name="expected_price" type="measure"/>
                    <field name="facades" type="measure"/>
                    <field name="bedrooms" type="measure"/>
                </pivot>
            </field>
        </record>

        <!-- Provides quick visualisations of data, e.g. here we can graph selling price in lots of different ways without much work -->
        <record id="estate_property_graph_view" model="ir.ui.view">
            <field name="name">estate.property.graph</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <graph>
                    <field name="name" type="row"/>
                    <field name="selling_price" type="measure"/>
                </graph>
            </field>
        </record>


        <record id="estate_property_calendar_view" model="ir.ui.view">
            <field name="name">estate.property.calendar</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <!-- This will inherit from the 'event' model by default, so we disable the quick popup form, as it will have stuff about events -->
                <calendar date_start="date_availability" string="Properties" mode="month" event_open_popup="true" quick_add="false">
                    <field name="name"/>
                    <field name="date_availability"/>
                    <field name="postcode"/>
                </calendar>
            </field>
        </record>


        <record id="estate_property_form_view" model="ir.ui.view">
            <field name="name">estate.property.form</field>
            <field name="model">estate.property</field>
            <field name="arch" type="xml">
                <form>
                    <header>
                        <button name="action_sold" type="object" string="Sold" class="btn btn-primary"/>
                        <button name="action_cancel" type="object" string="Cancel" class="btn btn-danger"/>
                        <field name="state" widget="statusbar"/>
                    </header>
                    <sheet>
                        <div class="oe_button_box" name="button_box">
                            <button class="oe_stat_button" name="action_property_view_offers" type="object" icon="fa-handshake-o">
                                <field name="offer_count" string="Offers" widget="statinfo"/>
                            </button>

                            <!-- A button to trigger a client action -->
<!--                            <button class="oe_stat_button" name="action_client_action" type="object" icon="fa-handshake-o">-->
<!--                                <field name="offer_count" string="Testing client" widget="statinfo"/>-->
<!--                            </button>-->
                        </div>
                        <group>
                            <field name="name"/>
                            <field name="tag_ids" widget="many2many_tags" options="{'color_field': 'color'}"/>
                            <group>
                                <field name="type_id"/>
                                <field name="postcode"/>
                                <field name="date_availability"/>
                            </group>
                            <group>
                                <field name="expected_price" widget="monetary"/>
                                <field name="best_offer" widget="monetary"/>
                                <field name="selling_price" widget="monetary"/>
                            </group>
                        </group>
                        <notebook>
                            <page string="Description">
                                <group>
                                    <field name="description"/>
                                    <field name="bedrooms"/>
                                    <field name="living_area"/>
                                    <field name="facades"/>
                                    <field name="garage"/>
                                    <field name="garden"/>
                                    <field name="garden_area" attrs="{'invisible': [('garden', '=', False)]}"/>
                                    <field name="garden_orientation" attrs="{'invisible': [('garden', '=', False)]}"/>
                                    <field name="total_area"/>

                                </group>

                            </page>
                            <page string="Offers">
                                <field name="offer_ids">
                                    <tree editable="bottom" decoration-success="status == 'accepted'" decoration-danger="status == 'refused'">
                                        <field name="price"/>
                                        <field name="partner_id"/>
                                        <field name="creation_date" invisible="1"/>
                                        <field name="validity"/>
                                        <field name="deadline"/>
                                        <field name="status" readonly="1"/>
                                        <button class="btn btn-primary" name="action_accept_offer" type="object" title="Accept" icon="fa-check"/>
                                        <button class="btn btn-primary" name="action_decline_offer" type="object" title="Decline" icon="fa-times"/>
                                    </tree>
                                </field>
                            </page>
                            <page string="Other Info">
                                <group>
                                    <field name="sales_id"/>
                                    <field name="buyer_id"/>
                                    <field name="phone"/>
                                </group>
                            </page>
                        </notebook>
                    </sheet>
                </form>
            </field>
        </record>


        <!-- Odoo actions: behaviour of the system in response to user actions -->
        <!-- This window action is just one of six types of action in Odoo -->
        <!-- Actions can be stored in the database or returned directly as dictionaries -->

        <!-- Others include server (e.g. server calls some python code) actions, report (create something you can print) actions, scheduled (cron job) actions, URL (sends you somewhere else) action, client (js/xml) action -->
        <record id="action_property" model="ir.actions.act_window">
            <field name="name">Property</field>
            <field name="res_model">estate.property</field>
            <!-- view_mode is a comma-separated list of the view types to make available. The first in the list is the one to open by default. -->
            <field name="view_mode">kanban,pivot,graph,calendar,tree,form</field>
            <field name="help" type="html">
                <p class="o_view_nocontent_smiling_face">
                    Create a Property to Advertise
                </p>
            </field>
        </record>


        <!-- Second step of running a custom client action -->
        <!-- We link this up with our menu via menu_items.xml -->

        <!-- We then need to create a widget for the client action within the 'static' folder -->
        <record id="action_custom_client_action" model="ir.actions.client">
            <field name="name">Custom Client Action</field>
            <!-- You don't need to tie a model in here -->
            <field name="tag">custom_client_action</field>
        </record>

        <!-- A server action -->
        <!-- Side note, we don't necessarily need to follow the `action_` naming convention -->
        <record id="action_extend_offer_deadline" model="ir.actions.server">
            <field name="name">Extend Deadline</field>
            <!-- This needs to receive the external ID of the ir.model record we're targeting -->
            <!-- ❌ estate.property.offer -->
            <!-- ✅ real_estate_ads.model_estate_property_offer -->
            <!-- The format is <module_name>.model_<model_name> -->
            <field name="model_id" ref="real_estate_ads.model_estate_property_offer"/>

            <!-- all actions also share optional attributes used to present an action in an arbitrary model’s contextual menu -->
            <!-- Without these, we would see the model if we went to 'server actions' in the technical settings -->
            <!-- But we wouldn't see it in the context menu of the model -->
            <field name="binding_model_id" ref="real_estate_ads.model_estate_property_offer"/>
            <!-- list,form are the defaults anyway. this is a list of the view types in which the action can appear. -->
            <field name="binding_view_types">list,form</field>

            <field name="state">code</field>
            <!--
            Could also be:
                - object_create
                - object_write
                - multi
            -->
            <!-- Specify the python code to run when the action is called -->
            <!-- The model object is linked to the action via model_id, we can access it within this 'evaluation context' -->
            <field name="code">
                action = model.extend_offer_deadline()
            </field>
        </record>

        <!-- A cron job -->
        <record id="ir_cron_extend_ofer_deadline" model="ir.cron">
            <field name="name">Offers: Extend Offer Deadline</field>
            <field name="model_id" ref="real_estate_ads.model_estate_property_offer"/>
            <field name="state">code</field>
            <field name="code">model._extend_offer_deadline()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <!-- -1 says it will run indefinitely -->
            <field name="numbercall">-1</field>
        </record>


    </data>
</odoo>